import { generateQueryString } from "../../../utils/generate-query-string"
import { apiSlice } from "../apiSlice"
import type {
  TCreateCategoryArgs,
  TCreateCategoryRes,
  TDeleteACategoryArgs,
  TDeleteACategoryRes,
  TGetACategoryArgs,
  TGetACategoryRes,
  TGetAllCategoryArgs,
  TGetAllCategoryRes,
  TUpdateACategoryArgs,
  TUpdateACategoryRes,
} from "./category.types"

export const categoryApi = apiSlice.injectEndpoints({
  endpoints: builder => ({
    // Supply generics for the return type (in this case `TCreateCategoryRes`)
    // and the expected query argument (in this case `TCreateCategoryArgs`). If there is no argument, use `void`
    // for the argument type instead.
    createCategory: builder.mutation<TCreateCategoryRes, TCreateCategoryArgs>({
      query: ({ body }) => ({
        url: `v1/api/categories`,
        method: "POST",
        body,
      }),

      invalidatesTags: ["getAllCategory"],
    }),

    getAllCategory: builder.query<TGetAllCategoryRes, TGetAllCategoryArgs>({
      query: args => {
        const { queryString } = generateQueryString(args)
        return {
          url: `v1/api/categories${queryString}`,
          method: "GET",
        }
      },
      providesTags: ["getAllCategory"],
    }),

    getACategory: builder.query<TGetACategoryRes, TGetACategoryArgs>({
      query: ({ id }) => {
        return {
          url: `v1/api/categories/${Number(id ?? -1)}`,
          method: "GET",
        }
      },
      providesTags: (result, error, arg) => [
        { type: "getACategory", id: Number(arg?.id ?? -1) },
      ],
    }),

    updateACategory: builder.mutation<
      TUpdateACategoryRes,
      TUpdateACategoryArgs
    >({
      query: ({ id, body }) => ({
        url: `v1/api/todo/${Number(id ?? -1)}`,
        method: "PUT",
        body,
      }),
      invalidatesTags: (result, error, arg) => [
        "getAllCategory",
        { type: "getACategory", id: Number(arg?.id ?? -1) },
      ],
    }),

    deleteCategory: builder.mutation<TDeleteACategoryRes, TDeleteACategoryArgs>(
      {
        query: ({ id }) => ({
          url: `v1/api/categories/${Number(id ?? -1)}`,
          method: "DELETE",
        }),
        invalidatesTags: (result, error, arg) => [
          "getAllCategory",
          { type: "getACategory", id: Number(arg?.id ?? -1) },
        ],
      },
    ),
  }),
})

// Hooks are auto-generated by RTK-Query
export const {
  useCreateCategoryMutation,
  useGetAllCategoryQuery,
  useGetACategoryQuery,
  useUpdateACategoryMutation,
  useDeleteCategoryMutation,
} = categoryApi
